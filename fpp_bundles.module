<?php
/**
 * @file
 * Module for creating panels from admin interface.
 *
 * @author Sergey Bondarenko <broken@propeople.com.ua>
 */

/**
 * Machine name of the module.
 */
define('FPP_BUNDLES_MODULE_MACHINE_NAME', 'fpp_bundles');
/**
 * An entity machine name.
 */
define('FPP_BUNDLES_ENTITY_TYPE', 'fieldable_panels_pane');
/**
 * An entity access permissions.
 */
define('FPP_BUNDLES_ENTITY_ACCESS', 'administer fieldable panels panes');
/**
 * An entity admin page.
 */
define('FPP_BUNDLES_ADMIN_URL', 'admin/structure/fieldable-panels-panes');
/**
 * Minimum characters number for name of the bundle.
 */
define('FPP_BUNDLES_MINIMUM_CHARS_FOR_NAME', 5);


/**
 * Main controller of the module.
 *
 * @param string $option_name
 *   Option name, a value of which will be returned.
 *
 * @return array
 *   Module settings or an option value.
 */
function fpp_bundles($option_name = '') {
  static $settings = array();

  if (!$settings) {
    foreach (array(
      'autocomplete category' => array(
        'type' => MENU_CALLBACK,
        'page callback' => TRUE,
        'page arguments' => array(5),
      ),
      'remove' => array(
        'title' => t('Remove the bundle'),
      ),
      'update' => array(
        'title' => t('Update the bundle'),
      ),
      'create' => array(
        'type' => MENU_LOCAL_ACTION,
        'title' => t('Create the bundle'),
      ),
    ) as $human_name => $data) {
      $relative_path = str_replace(' ', '/', $human_name);
      // All menu routes of the module relative to the next URL:
      // "admin/structure/fieldable-panels-panes/list/{module_route}".
      // That's necessary to be a part of the FPP module and complement it.
      $route_path = FPP_BUNDLES_ADMIN_URL . '/' . $relative_path;
      // Prefix for the menu callback function, by default it will be the
      // next: "_fpp_bundles_".
      $callback_prefix = '_' . FPP_BUNDLES_MODULE_MACHINE_NAME . '_';
      // The suffix of the routing callback function by default is a
      // "manage_bundle". Due to this, default callback function name
      // is a "_fpp_bundles_manage_bundle".
      $callback_suffix = 'manage_bundle';

      // If we don't want to use the default route function, then we can
      // override it, defining the "page callback". Suffix of the callback
      // function will be generated automatically from relative route path.
      if (isset($data['page callback'])) {
        $callback_suffix = _fpp_bundles_create_machine_name($human_name);
        unset($data['page callback']);
      }

      $settings['menu_routes'][$route_path] = $data + array(
        'type' => MENU_VISIBLE_IN_BREADCRUMB,
        'page callback' => $callback_prefix . $callback_suffix,
        'page arguments' => array(3),
        'access arguments' => array(FPP_BUNDLES_ENTITY_ACCESS),
      );

      $settings['menu_paths'][$human_name] = $route_path;

      if (isset($data['title'])) {
        $settings['action_titles'][$human_name] = $data['title'];
      }
    }
  }

  return isset($settings[$option_name]) ? $settings[$option_name] : $settings;
}

/**
 * Get an object for working with DB.
 *
 * @return \FppBundlesDatabase
 *   An object instance.
 */
function fpp_bundles_db() {
  return \FppBundlesDatabase::instance(FPP_BUNDLES_MODULE_MACHINE_NAME);
}

/**
 * Get the information about entity of the "fieldable_panels_pane" type.
 *
 * @return \stdClass
 *   Entity information.
 */
function fpp_bundles_get_fieldable_panels_pane_entity() {
  return (object) entity_get_info(FPP_BUNDLES_ENTITY_TYPE);
}

/**
 * Create the module route.
 *
 * @return array
 *   An array of menu routes.
 */
function fpp_bundles_menu() {
  return fpp_bundles('menu_routes');
}

/**
 * Implements hook_features_api().
 */
function fpp_bundles_features_api() {
  $integrations = array();

  $integrations[FPP_BUNDLES_MODULE_MACHINE_NAME] = array(
    'name' => t('Fieldable Panels Panes Bundles'),
    'file' => drupal_get_path('module', FPP_BUNDLES_MODULE_MACHINE_NAME) . '/includes/' . FPP_BUNDLES_MODULE_MACHINE_NAME . '.features.inc',
    'default_hook' => FPP_BUNDLES_MODULE_MACHINE_NAME,
    'default_file' => FEATURES_DEFAULTS_INCLUDED,
    'feature_source' => TRUE,
  );

  return $integrations;
}

/**
 * Implements hook_entity_info_alter().
 */
function fpp_bundles_entity_info_alter(&$entity_info) {
  /* @var \FppBundle $bundle */
  foreach (fpp_bundles_db()->getAllBundles() as $machine_name => $bundle) {
    $entity_info[FPP_BUNDLES_ENTITY_TYPE]['bundles'][$machine_name] = array(
      'bid' => $bundle->getBundleId(),
      'label' => $bundle->getHumanName(),
      'pane category' => $bundle->getCategoryName() ?: t('Custom'),
      'pane top level' => $bundle->isTopLevelPanel(),
      'admin' => array(
        'path' => FPP_BUNDLES_ADMIN_URL . '/manage/%fieldable_panels_panes_type',
        'real path' => FPP_BUNDLES_ADMIN_URL . "/manage/$machine_name",
        'bundle argument' => 4,
        'access arguments' => array(FPP_BUNDLES_ENTITY_ACCESS),
      ),
    );
  }
}

/**
 * Implements hook_menu_alter().
 */
function fpp_bundles_menu_alter(&$items) {
  $item =& $items[FPP_BUNDLES_ADMIN_URL];

  // Set original callback to page arguments and replace it to custom.
  $item['page callback'] = '_' . FPP_BUNDLES_MODULE_MACHINE_NAME . '_entities_page';
}

/**
 * Form for add/edit the FPP bundle.
 *
 * @param string $action
 *   An action that been performed.
 * @param int $bid
 *   The bundle ID.
 *
 * @see fpp_bundles()
 *
 * @return array
 *   An array of form items.
 */
function _fpp_bundles_manage_bundle($action, $bid = NULL) {
  if ($action == 'create') {
    $bundle = new \FppBundle();

    if (isset($bid)) {
      drupal_goto(_fpp_bundles_get_menu_path($action));
    }
  }
  else {
    $bundle = fpp_bundles_db()->getBundleByDbIndex('primary', $bid);
  }

  if (!$bundle) {
    drupal_goto(FPP_BUNDLES_ADMIN_URL);
  }

  return drupal_get_form(__FUNCTION__ . '_form', $bundle, $action, drupal_set_title(_fpp_bundles_get_action_title($action)));
}

/**
 * Callback function for check bundles categories.
 *
 * @param string $string
 *   User input.
 */
function _fpp_bundles_autocomplete_category($string) {
  $matches = array();
  $result = fpp_bundles_db()
    ->prepareBundles()
    ->condition('category', "%$string%", 'like')
    ->range(0, 15)
    ->execute();

  foreach ($result as $row) {
    $matches[$row->category] = $row->category;
  }

  drupal_json_output($matches);
}

/**
 * Settings form for the bundles actions.
 *
 * @param array $form
 *   Form items and configuration.
 * @param array $form_state
 *   Information about current state of the form.
 * @param \FppBundle $bundle
 *   Bundle object.
 * @param string $action
 *   Performing action.
 * @param string $page_title
 *   Human readable page name.
 *
 * @see _fpp_bundles_manage_bundle()
 *
 * @return array
 *   Drupal form.
 */
function _fpp_bundles_manage_bundle_form(array $form, array &$form_state, \FppBundle $bundle, $action, $page_title) {
  $bundle_name = $bundle->getHumanName();
  $items = array();

  // Create hidden fields.
  foreach (array(
    'bid' => $bundle->getBundleId(),
    'action' => $action,
    'machine' => $bundle->getMachineName(),
  ) as $name => $value) {
    $items[$name] = array(
      '#type' => 'hidden',
      '#default_value' => $value,
    );
  }

  $items['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name of the bundle'),
    '#required' => TRUE,
    '#default_value' => $bundle_name,
  );

  $items['category'] = array(
    '#type' => 'textfield',
    '#title' => t('Bundle category'),
    '#default_value' => $bundle->getCategoryName(),
    '#autocomplete_path' => _fpp_bundles_get_menu_path('autocomplete category'),
  );

  $items['level'] = array(
    '#type' => 'checkbox',
    '#title' => t('An entity will be shown in the general list.'),
    '#description' => '',
    '#default_value' => $bundle->isTopLevelPanel(),
  );

  $form['actions'] = array(
    '#type' => 'actions',
  );

  $form['actions']['save'] = array(
    '#type' => 'submit',
    '#value' => $page_title,
  );

  if ($action == 'remove') {
    $items = array_map('hide', $items);
    $form['warning'] = array(
      '#markup' => t('Do you really want to remove the "!name" FPP bundle? This action can not to be undone!', array(
        '!name' => "<b>$bundle_name</b>",
      )),
    );
  }

  return $items + $form;
}

/**
 * Validation handler for _fpp_bundles_manage_bundle_form().
 */
function _fpp_bundles_manage_bundle_form_validate(array $form, array &$form_state) {
  $values =& $form_state['values'];

  // For "create" and "update" actions.
  if ($values['action'] != 'remove') {
    foreach (array('name', 'category') as $field) {
      $values[$field] = _fpp_bundles_create_name($values[$field]);
    }

    if (empty($values['name'])) {
      form_set_error('name', t('The name of bundle should not be empty and can contain only latin letters.'));
    }
    elseif (!strlen(preg_replace('/\d+|\s+/', '', $values['name']))) {
      form_set_error('name', t('The name of bundle should not contain only numbers.'));
    }
    elseif (strlen($values['name']) < FPP_BUNDLES_MINIMUM_CHARS_FOR_NAME) {
      form_set_error('name', t('The name of bundle should contain more than !number symbols.', array(
        '!number' => FPP_BUNDLES_MINIMUM_CHARS_FOR_NAME,
      )));
    }
  }

  // The "create" action only.
  if ($values['action'] == 'create') {
    $values['machine'] = _fpp_bundles_create_machine_name($values['name']);

    if (isset(fpp_bundles_get_fieldable_panels_pane_entity()->bundles[$values['machine']])) {
      form_set_error('name', t('The bundle with such name is already exists!'));
    }

    unset($values['bid']);
  }

  try {
    $form_state['bundle'] = fpp_bundles_db()->prepareBundleData($values);
  }
  catch (\FppBundlesException $e) {
    form_set_error('name', $e->getMessage());
  }
}

/**
 * Submit handler for _fpp_bundles_manage_bundle_form().
 */
function _fpp_bundles_manage_bundle_form_submit(array $form, array &$form_state) {
  $values = $form_state['values'];

  // @todo Remove all fields of the bundle together with it.
  fpp_bundles_db()->{$values['action'] . 'Bundle'}($form_state['bundle']);
  _fpp_bundles_clear_caches();

  drupal_set_message(t('Operation over the "!bundle" bundle has been successfully completed.', array(
    '!bundle' => $values['name'],
  )));

  $form_state['redirect'] = FPP_BUNDLES_ADMIN_URL;
}

/**
 * Callback function for the FPP Entities page.
 *
 * @return array
 *   An array with elements for render.
 */
function _fpp_bundles_entities_page() {
  $items = $rows = array();

  /* @var \FppBundle $bundle */
  foreach (fpp_bundles_db()->getAllBundles(10) as $machine_name => $bundle) {
    $manage_entity_url = FPP_BUNDLES_ADMIN_URL . "/manage/$machine_name";
    $actions = array();

    $actions['entity'] = _fpp_bundles_build_links_for_operations_with_bundle($manage_entity_url);

    foreach (array(
      'update' => t('update'),
      'remove' => t('remove'),
    ) as $action_type => $action_name) {
      $actions['bundle'][$action_type] = array(
        'title' => $action_name,
        'href' => _fpp_bundles_get_menu_path($action_type) . '/' . $bundle->getBundleId(),
      );
    }

    foreach (array('entity', 'bundle') as $action_type) {
      $actions[$action_type] = _fpp_bundles_theme_links_block($actions[$action_type]);
    }

    $rows[] = array(
      'name' => l($bundle->getHumanName(), $manage_entity_url),
      'category' => $bundle->getCategoryName(),
    ) + $actions;
  }

  $items['bundles'] = array(
    '#theme' => 'table',
    '#header' => array(
      'name' => t('Name'),
      'category' => t('Category'),
      'entity' => t('Entity actions'),
      'bundle' => t('Bundle actions'),
    ),
    '#rows' => $rows,
    '#empty' => t('Any bundle has not been created.'),
  );

  $items['pager'] = array(
    '#theme' => 'pager',
  );

  $items['separator'] = array(
    '#tag' => 'h4',
    '#type' => 'html_tag',
    '#value' => t('Bundles, that has been created programmatically.'),
    '#attributes' => array(
      'class' => 'form-item',
    ),
  );

  $items[] = _fpp_bundles_get_bundles_stored_in_code();

  return $items;
}

/**
 * Get an array with links for entity managing.
 *
 * @param string $url_prefix
 *   Admin URL to bundle page. Will be suffixed by action type.
 *
 * @return array
 *   An associative array where key is a machine name of link and
 *   value - an array with two keys: "title" and "href".
 */
function _fpp_bundles_build_links_for_operations_with_bundle($url_prefix) {
  $actions = array();

  foreach (array(
    'add' => t('add panel'),
    'fields' => t('manage fields'),
    'display' => t('manage display'),
  ) as $action_type => $action_name) {
    $actions[$action_type] = array(
      'title' => $action_name,
      'href' => "$url_prefix/$action_type",
    );
  }

  return $actions;
}

/**
 * Wrapper for Drupal "theme()" function.
 *
 * @param array $links
 *   An array that can be rendered by Drupal mechanism.
 *
 * @return string
 *   HTML markup.
 */
function _fpp_bundles_theme_links_block(array $links) {
  return theme('links', array(
    'links' => $links,
    'attributes' => array(
      'class' => array('links', 'inline'),
    ),
  ));
}

/**
 * Get an array with bundles for render which has been created programmatically.
 */
function _fpp_bundles_get_bundles_stored_in_code() {
  $rows = array();

  foreach (fpp_bundles_get_fieldable_panels_pane_entity()->bundles as $bundle) {
    // If the bundle does not have the "bid" it means that it has
    // been created programmatically.
    if (!isset($bundle['bid'])) {
      $rows[] = array(
        'name' => l($bundle['label'], $bundle['admin']['real path']),
        'category' => isset($bundle['pane category']) ? $bundle['pane category'] : '',
        'operations' => _fpp_bundles_theme_links_block(_fpp_bundles_build_links_for_operations_with_bundle($bundle['admin']['real path'])),
      );
    }
  }

  return array(
    '#theme' => 'table',
    '#header' => array(
      'name' => t('Name'),
      'category' => t('Category'),
      'operations' => t('Operations'),
    ),
    '#rows' => $rows,
  );
}

/**
 * Get the URL by action name.
 *
 * @param string $action_name
 *   Name of performed action.
 *
 * @return string
 *   Relative URL or an empty string if action does not exist.
 */
function _fpp_bundles_get_menu_path($action_name) {
  $paths = fpp_bundles('menu_paths');
  return isset($paths[$action_name]) ? $paths[$action_name] : '';
}

/**
 * Get the title by action name.
 *
 * @param string $action_name
 *   Name of performed action.
 *
 * @return string
 *   Title for the specified action or an empty string if action does not exist.
 */
function _fpp_bundles_get_action_title($action_name) {
  $titles = fpp_bundles('action_titles');
  return isset($titles[$action_name]) ? $titles[$action_name] : '';
}

/**
 * Transform a any string to machine name.
 *
 * @param string $string
 *   Input string for transformations.
 *
 * @example
 *   String: "__-_   An awe-some manager!#$%^&_+123=-ÆæØä'Ö\"@ (bundle)"
 *   Will be transformed to: "an_awe_some_manager123_bundle".
 *
 * @return string
 *   Generated name.
 */
function _fpp_bundles_create_machine_name($string) {
  // Firstly, set to lowercase the input string. Secondly, leave in a
  // row only lowercase latin characters, numbers, and single spaces,
  // but only between the words. Thirdly, replace spaces to underscores, and,
  // fourthly, remove underscores from start and end of line.
  return trim(preg_replace('/\s+|-+/', '_', trim(preg_replace('/[^a-z\d\s-]/', '', strtolower($string)))), '_');
}

/**
 * Transform any string to human readable name.
 *
 * @param string $string
 *   Input string for transformations.
 *
 * @return string
 *   Generated name.
 */
function _fpp_bundles_create_name($string) {
  return trim(preg_replace('/\s+/', ' ', preg_replace('/[^\w+]|\+|_/i', ' ', $string)));
}

/**
 * Clear caches of the Drupal theme and entities.
 */
function _fpp_bundles_clear_caches() {
  entity_info_cache_clear();
  drupal_theme_rebuild();
}
